-- MySQL Script generated by MySQL Workbench
-- Wed Sep 29 17:34:55 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema concert.ua
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema concert.ua
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `concert.ua` DEFAULT CHARACTER SET utf8 ;
USE `concert.ua` ;

-- -----------------------------------------------------
-- Table `concert.ua`.`type_of_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`type_of_event` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(20) NOT NULL,
  `type_of_event_description` VARCHAR(150) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`artist_or_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`artist_or_group` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `artist_description` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`event` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type_of_event_id` INT NOT NULL,
  `artist_or_group_id` INT NULL,
  `data` DATETIME NOT NULL,
  `duration` VARCHAR(10) NOT NULL,
  `description` VARCHAR(45) NULL,
  `max_seats_available` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_event_type_of_event1_idx` (`type_of_event_id` ASC) VISIBLE,
  INDEX `fk_event_artist_or_group1_idx` (`artist_or_group_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_type_of_event1`
    FOREIGN KEY (`type_of_event_id`)
    REFERENCES `concert.ua`.`type_of_event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_artist_or_group1`
    FOREIGN KEY (`artist_or_group_id`)
    REFERENCES `concert.ua`.`artist_or_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`transaction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `data_of_transaction` DATETIME NOT NULL,
  `sum` INT NOT NULL,
  `discount_in_percent` INT NULL,
  `status_of_transaction` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`destination_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`destination_address` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `region` VARCHAR(45) NOT NULL,
  `city_village` VARCHAR(45) NOT NULL,
  `street` VARCHAR(45) NULL,
  `building` VARCHAR(45) NULL,
  `flat` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`type_of_delivery`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`type_of_delivery` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  `delivery_description` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `destination_address_id` INT NOT NULL,
  `type_of_delivery_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_order_destination_address1_idx` (`destination_address_id` ASC) VISIBLE,
  INDEX `fk_order_type_of_delivery1_idx` (`type_of_delivery_id` ASC) VISIBLE,
  CONSTRAINT `fk_order_destination_address1`
    FOREIGN KEY (`destination_address_id`)
    REFERENCES `concert.ua`.`destination_address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_type_of_delivery1`
    FOREIGN KEY (`type_of_delivery_id`)
    REFERENCES `concert.ua`.`type_of_delivery` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `concert.ua`.`ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `concert.ua`.`ticket` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  `transaction_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ticket_event1_idx` (`event_id` ASC) VISIBLE,
  INDEX `fk_ticket_transaction1_idx` (`transaction_id` ASC) VISIBLE,
  INDEX `fk_ticket_order1_idx` (`order_id` ASC) VISIBLE,
  UNIQUE INDEX `event_id_UNIQUE` (`event_id` ASC) VISIBLE,
  UNIQUE INDEX `transaction_id_UNIQUE` (`transaction_id` ASC) VISIBLE,
  UNIQUE INDEX `order_id_UNIQUE` (`order_id` ASC) VISIBLE,
  CONSTRAINT `fk_ticket_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `concert.ua`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ticket_transaction1`
    FOREIGN KEY (`transaction_id`)
    REFERENCES `concert.ua`.`transaction` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ticket_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `concert.ua`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
